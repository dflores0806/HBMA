/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Person;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-15T13:08:41.429319800+01:00[Europe/Madrid]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "persons", description = "the persons API")
public interface PersonsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /persons : Retrieve a list of persons
     *
     * @return A list of persons (status code 200)
     */
    @Operation(
        operationId = "personsGet",
        summary = "Retrieve a list of persons",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of persons", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Person.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/persons",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Person>> personsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"virtualProfile\" : { \"service\" : [ { \"endpoint\" : \"endpoint\", \"access\" : { \"name\" : \"name\", \"id\" : \"id\", \"value\" : \"value\" }, \"name\" : \"name\", \"id\" : \"id\" }, { \"endpoint\" : \"endpoint\", \"access\" : { \"name\" : \"name\", \"id\" : \"id\", \"value\" : \"value\" }, \"name\" : \"name\", \"id\" : \"id\" } ] }, \"name\" : \"name\", \"id\" : \"id\", \"device\" : { \"model\" : \"model\", \"id\" : \"id\", \"manufacturer\" : \"manufacturer\" } }, { \"virtualProfile\" : { \"service\" : [ { \"endpoint\" : \"endpoint\", \"access\" : { \"name\" : \"name\", \"id\" : \"id\", \"value\" : \"value\" }, \"name\" : \"name\", \"id\" : \"id\" }, { \"endpoint\" : \"endpoint\", \"access\" : { \"name\" : \"name\", \"id\" : \"id\", \"value\" : \"value\" }, \"name\" : \"name\", \"id\" : \"id\" } ] }, \"name\" : \"name\", \"id\" : \"id\", \"device\" : { \"model\" : \"model\", \"id\" : \"id\", \"manufacturer\" : \"manufacturer\" } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /persons/{id} : Get information about a person by ID
     *
     * @param id  (required)
     * @return Information about the person (status code 200)
     */
    @Operation(
        operationId = "personsIdGet",
        summary = "Get information about a person by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Information about the person", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Person.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/persons/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Person> personsIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"virtualProfile\" : { \"service\" : [ { \"endpoint\" : \"endpoint\", \"access\" : { \"name\" : \"name\", \"id\" : \"id\", \"value\" : \"value\" }, \"name\" : \"name\", \"id\" : \"id\" }, { \"endpoint\" : \"endpoint\", \"access\" : { \"name\" : \"name\", \"id\" : \"id\", \"value\" : \"value\" }, \"name\" : \"name\", \"id\" : \"id\" } ] }, \"name\" : \"name\", \"id\" : \"id\", \"device\" : { \"model\" : \"model\", \"id\" : \"id\", \"manufacturer\" : \"manufacturer\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /persons : Create a new person
     *
     * @param person  (required)
     * @return Person created successfully (status code 201)
     */
    @Operation(
        operationId = "personsPost",
        summary = "Create a new person",
        responses = {
            @ApiResponse(responseCode = "201", description = "Person created successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/persons",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> personsPost(
        @Parameter(name = "Person", description = "", required = true) @Valid @RequestBody Person person
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
